<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.membership.repository.mybatis.OrderMapper">

    <resultMap id="orderResultMap" type="org.example.membership.dto.OrderResponse">
        <id property="id" column="id"/>
        <result property="userId" column="user_id"/>
        <result property="couponId" column="coupon_id"/>
        <result property="totalAmount" column="total_amount"/>
        <result property="status" column="status"/>
        <result property="orderedAt" column="ordered_at"/>
    </resultMap>

    <select id="findAll" resultMap="orderResultMap">
        SELECT * FROM orders
    </select>

    <select id="findByUserId" resultMap="orderResultMap">
        SELECT * FROM orders WHERE user_id = #{userId}
    </select>

    <select id="findWithItemsByUserId" resultMap="orderResultMap">
        SELECT o.*,
               oi.id          AS oi_id,
               oi.product_id  AS oi_product_id,
               oi.quantity    AS oi_quantity,
               oi.item_price  AS oi_item_price
        FROM orders o
                 LEFT JOIN order_items oi ON oi.order_id = o.id
        WHERE o.user_id = #{userId}
    </select>

    <insert id="insert"
            parameterType="org.example.membership.dto.OrderRequest"
            useGeneratedKeys="true"
            keyProperty="id">
        INSERT INTO orders (
            user_id,
            coupon_id,
            total_amount,
            status,
            ordered_at
        ) VALUES (
                     #{userId},
                     #{couponId},
                     #{totalAmount},
                     #{status},
                     #{orderedAt}
                 )
    </insert>

    <select id="findById" resultMap="orderResultMap">
        SELECT * FROM orders WHERE id = #{id}
    </select>

    <select id="findByUserIdOrderByCreatedAtDesc" resultMap="orderResultMap">
        SELECT * FROM orders WHERE user_id = #{userId} ORDER BY ordered_at DESC
    </select>

    <update id="update" parameterType="org.example.membership.entity.Order">
        UPDATE orders
        SET coupon_id = #{coupon.id},
            total_amount = #{totalAmount},
            status = #{status},
            ordered_at = #{orderedAt}
        WHERE id = #{id}
    </update>

    <delete id="deleteById" parameterType="long">
        DELETE FROM orders WHERE id = #{id}
    </delete>

    <select id="sumOrderAmountByUserBetween" resultType="org.example.membership.dto.UserOrderTotal">
        SELECT o.user_id AS userId,
               SUM(oi.item_price * oi.quantity - IFNULL(c.discount_amount,0)) AS totalAmount
        FROM orders o
                 JOIN order_items oi ON oi.order_id = o.id
                 LEFT JOIN coupons c ON o.coupon_id = c.id
        WHERE o.status = 'PAID'
          AND o.ordered_at BETWEEN #{start} AND #{end}
        GROUP BY o.user_id
    </select>

    <select id="aggregateByUserAndCategoryBetween" resultType="org.example.membership.dto.UserCategoryOrderStats">
        SELECT o.user_id AS userId,
               p.category_id AS categoryId,
               COUNT(oi.id) AS orderCount,
               SUM(oi.item_price * oi.quantity - IFNULL(c.discount_amount,0)) AS totalAmount
        FROM orders o
                 JOIN order_items oi ON oi.order_id = o.id
                 JOIN products p ON oi.product_id = p.id
                 LEFT JOIN coupons c ON o.coupon_id = c.id
        WHERE o.status = 'PAID'
          AND o.ordered_at BETWEEN #{start} AND #{end}
        GROUP BY o.user_id, p.category_id
    </select>
</mapper>